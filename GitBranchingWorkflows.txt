Git Best Practices

1. Don’t git push straight to master. Branch it out!
2. Write descriptive and meaningful commit messages.
3. Rebase your working branch frequently.
4. Test changes even when there are no conflicts.
5. Publish your changes.

 
Git Branching - Branching Workflows (https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows)

Now that you have the basics of branching and merging down, what can or should you do with them? 
In this section, we’ll cover some common workflows that this lightweight branching makes possible, 
so you can decide if you would like to incorporate them into your own development cycle.

Long-Running Branches

Many Git developers have a workflow that embraces this approach, such as having only code that is entirely stable in their master branch—possibly only code that has been or will be released. They have another parallel branch named develop or next that they work from or use to test stability—it isn't necessarily always stable, but whenever it gets to a stable state, it can be merged into master.It's used to pull in topic branches (short-lived branches,like your earlier iss53 branch) when they're ready,to make sure they pass all the tests and don't introduce bugs.

Topic Branches


