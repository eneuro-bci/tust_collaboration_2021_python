Git Best Practices

1. Don’t git push straight to master. Branch it out!
2. Write descriptive and meaningful commit messages.
3. Rebase your working branch frequently.
4. Test changes even when there are no conflicts.
5. Publish your changes.

 
Git Branching - Branching Workflows (https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows)

Now that you have the basics of branching and merging down, what can or should you do with them? 
In this section, we’ll cover some common workflows that this lightweight branching makes possible, 
so you can decide if you would like to incorporate them into your own development cycle.

Long-Running Branches



Topic Branches

You saw this in the last section with the iss53 and hotfix branches you created. You did a few commits on them and deleted them directly after merging them into your main branch. This technique allows you to context-switch quickly and completely — because your work is separated into silos where all the changes in that branch have to do with that topic, it’s easier to see what has happened during code review and such. You can keep the changes there for minutes, days, or months, and merge them in when they’re ready, regardless of the order in which they were created or worked on.
