Git Best Practices

1. Don’t git push straight to master. Branch it out!
2. Write descriptive and meaningful commit messages.
3. Rebase your working branch frequently.
4. Test changes even when there are no conflicts.
5. Publish your changes.

 
Git Branching - Branching Workflows (https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows)

Now that you have the basics of branching and merging down, what can or should you do with them? 
In this section, we’ll cover some common workflows that this lightweight branching makes possible, 
so you can decide if you would like to incorporate them into your own development cycle.

Long-Running Branches

Because Git uses a simple three-way merge, merging from one branch into another mutiple times over a long period is generally easy to do. This means you can have several branches that are always open and that you use for different stages of your development cycle: you can merge regularty from some of them into others.

Topic Branches

You saw this in the last section with the iss53 and hotfix branches you created. You did a few commits on them and deleted them directly after merging them into your main branch. This technique allows you to context-switch quickly and completely — because your work is separated into silos where all the changes in that branch have to do with that topic, it’s easier to see what has happened during code review and such. You can keep the changes there for minutes, days, or months, and merge them in when they’re ready, regardless of the order in which they were created or worked on.Consider an example of doing some work (on mastez), branching off for an issue (iss91 ), working on itfor a bit, branching off the second branch to try another way of handling the same thing (iss91v2)going back to your master branch and working there for a while, and then branching off there to dosome work that you're not sure is a good idea (dumbidea branch). Your commit history will looksomething like this:
